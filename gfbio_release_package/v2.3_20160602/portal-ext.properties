browser.cache.disabled=false
session.timeout.auto.extend=true
redirect.url.security.mode=domain


jdbc.default.driverClassName=org.postgresql.Driver
jdbc.default.url=jdbc:postgresql://localhost:5432/liferay
jdbc.default.username=gfbiodb
jdbc.default.password=Tower17

jdbc.gfbio.username=gfbiodb
jdbc.gfbio.password=Tower17
jdbc.gfbio.driverClassName=org.postgresql.Driver
jdbc.gfbio.url=jdbc:postgresql://localhost:5432/gfbio?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false


#jdbc.gfbio.driverClassName=org.postgresql.Driver
#jdbc.gfbio.url=jdbc:postgresql://localhost:2222/gfbio
#jdbc.gfbio.username=postgres
#jdbc.gfbio.password=gfbio

######################################### Database #########################################
   
    # Liferay can use C3PO, DBCP, or Tomcat for connection pooling. See
    # com.liferay.portal.dao.jdbc.util.DataSourceFactoryBean for the actual
    # implementation. It is important to understand the strengths and weaknesses
    # of each provider so that you can choose the best one that fits your
    # deployment scenario. Provider specific properties can also be passed along
    # directly to the provider. For example, the property
    # "jdbc.default.acquireIncrement" is read by C3PO, and the property
    # "jdbc.default.maxActive" is read by DBCP.
    #
    # The default provider is C3PO.
    #
    jdbc.default.liferay.pool.provider=c3po
    #jdbc.default.liferay.pool.provider=dbcp
    #jdbc.default.liferay.pool.provider=tomcat

    #
    # The following properties will be read by C3PO if Liferay is configured to
    # use C3PO in the property "jdbc.default.liferay.pool.provider". See
    # http://www.mchange.com/projects/c3p0/index.html#configuration for a list
    # of additional fields used by C3PO for configuring database connections.
    #
    jdbc.default.acquireIncrement=5
    jdbc.default.acquireRetryAttempts=3
    jdbc.default.acquireRetryDelay=1000
    jdbc.default.connectionCustomizerClassName=com.liferay.portal.dao.jdbc.pool.c3p0.PortalConnectionCustomizer
    jdbc.default.idleConnectionTestPeriod=60
    jdbc.default.maxIdleTime=3600
    jdbc.default.maxPoolSize=100
    jdbc.default.minPoolSize=10
    jdbc.default.numHelperThreads=10
    #jdbc.default.transactionIsolation=1
	
	
################ disable my profile and my dashboard ###############

layout.user.public.layouts.enabled=false
layout.user.private.layouts.enabled=false

layout.user.public.layouts.modifiable=false
layout.user.private.layouts.modifiable=false

layout.user.public.layouts.auto.create=false
layout.user.private.layouts.auto.create=false
	
	
################## Performance #########################

theme.css.fast.load=true
javascript.fast.load=true


##
## Servlet Filters
##

    #
    # The absolute redirects filter is used to ensure that all redirects are
    # absolute. It should not be disabled because it also sets the company id in
    # the request so that subsequent calls in the thread have the company id
    # properly set. This filter should also always be the first filter in the
    # list of filters.
    #
    com.liferay.portal.servlet.filters.absoluteredirects.AbsoluteRedirectsFilter=true

    #
    # The aggregate filter is used to aggregate CSS and JavaScript. Do not
    # disable this filter because it performs necessary aggregation of portal
    # resources. You may, however, set the property "minifier.enabled" to
    # disable minification of resources.
    #
    com.liferay.portal.servlet.filters.aggregate.AggregateFilter=true

    #
    # The audit filter populates the AuditRequestThreadLocal with the
    # appropriate request values to generate audit requests.
    #
    com.liferay.portal.servlet.filters.audit.AuditFilter=false

    #
    # The auth verifier filter is used to verify whether a request is
    # authenticated or not.
    #
    com.liferay.portal.servlet.filters.authverifier.AuthVerifierFilter=true

    #
    # The auto login filter processes the classes in the property
    # "auto.login.hooks" to provide auto login functionality.
    #
    com.liferay.portal.servlet.filters.autologin.AutoLoginFilter=true

    #
    # The cache filter caches processed web content. See ehcache.xml to modify
    # the cache expiration time to live.
    #
    com.liferay.portal.servlet.filters.cache.CacheFilter=true

    #
    # The CAS filter is used to provide CAS based single sign on.
    #
    com.liferay.portal.servlet.filters.sso.cas.CASFilter=true

    #
    # The char buffer pool filter enables char buffer pooling to minimize
    # garbage collection of large char arrays. See the system property
    # "com.liferay.portal.kernel.util.StringBundler.unsafe.create.limit".
    #
    com.liferay.portal.servlet.filters.charbufferpool.CharBufferPoolFilter=false

    #
    # The dynamic CSS filter is used to parse Sass CSS.
    #
    com.liferay.portal.servlet.filters.dynamiccss.DynamicCSSFilter=true

    #
    # The ETag filter is used to generate ETag headers.
    #
    com.liferay.portal.servlet.filters.etag.ETagFilter=true

    #
    # If the user can unzip compressed HTTP content, the GZip filter will
    # zip up the HTTP content before sending it to the user. This will speed up
    # page rendering for users that are on dial up.
    #
    com.liferay.portal.servlet.filters.gzip.GZipFilter=true

    #
    # The header filter is used to set request headers.
    #
    com.liferay.portal.servlet.filters.header.HeaderFilter=true

    #
    # The ignore filter will ignore certain files from being accessed directly
    # from a browser.
    #
    com.liferay.portal.servlet.filters.ignore.IgnoreFilter=true

    #
    # The I18n filter is used to internationalize URLs. See the property
    # "locale.prepend.friendly.url.style" for more information.
    #
    com.liferay.portal.servlet.filters.i18n.I18nFilter=true

    #
    # The JSON content type filter is used because Internet Explorer does not
    # recognize the content type "application/json". See LPS-33187.
    #
    com.liferay.portal.servlet.filters.jsoncontenttype.JSONContentTypeFilter=true

    #
    # The language filter replaces JavaScript code that makes a client side call
    # to translate a piece of text with the actual translated value. For
    # example, a typical piece of JavaScript code fits the pattern
    # "Liferay.Language.get('key')" where 'key' is the text to translate. This
    # filter will replace the entire piece of code with the translated text.
    # This is very useful because it will lower the number of client calls by
    # translating the text before the browser receives the JavaScript file.
    #
    com.liferay.portal.servlet.filters.language.LanguageFilter=true

    #
    # The monitoring filter monitors portal request performance.
    #
    com.liferay.portal.servlet.filters.monitoring.MonitoringFilter=true

    #
    # The NTLM filter is used to provide NTLM based single sign on.
    #
    com.liferay.portal.servlet.filters.sso.ntlm.NtlmFilter=false

    #
    # The NTLM post filter is used to fix known issues with NTLM and ajax
    # requests. See LPS-3795.
    #
    com.liferay.portal.servlet.filters.sso.ntlm.NtlmPostFilter=false

    #
    # The OpenSSO filter is used to provide OpenSSO based single sign on.
    #
    com.liferay.portal.servlet.filters.sso.opensso.OpenSSOFilter=false

    #
    # The secure filter is used to protect servlets based on IP and protocol.
    # See the properties "*.servlet.hosts.allowed" and
    # "*.servlet.https.required".
    #
    com.liferay.portal.servlet.filters.secure.SecureFilter=true

    #
    # The servlet authorizing filter allows external servlets to be authorized
    # by the portal. See LEP-4682.
    #
    com.liferay.portal.servlet.filters.servletauthorizing.ServletAuthorizingFilter=true

    #
    # The session id filter ensures that only one session is created between
    # HTTP and HTTPS sessions. This is useful if you want users to login via
    # HTTPS but have them view the rest of the site via HTTP. This is disabled
    # by default. Do not enable this unless you thoroughly understand how
    # cookies, HTTP, and HTTPS work.
    #
    com.liferay.portal.servlet.filters.sessionid.SessionIdFilter=false

    #
    # The session max allowed filter invalidates the latest session if the
    # latest session exceeds the maximum number of allowed sessions. This filter
    # is not used unless the property "session.max.allowed" is greater than 0.
    #
    com.liferay.portal.servlet.filters.sessionmaxallowed.SessionMaxAllowedFilter=false

    #
    # The Sharepoint filter allows users to access documents in the Document
    # Library directly from Microsoft Office using the Sharepoint protocol.
    #
    com.liferay.portal.sharepoint.SharepointFilter=false

    #
    # The strip filter will remove blank lines from the outputted content. This
    # will speed up page rendering for users that are on dial up.
    #
    com.liferay.portal.servlet.filters.strip.StripFilter=true

    #
    # The theme preview filter generates a preview of the currently applied
    # theme that can be used by the Dreamweaver Theming plugin. This is disabled
    # by default. Set the "themePreview" parameter to 1 in the URL to access
    # the theme preview for any page. For example, a URL can be
    # http://localhost:8080/web/guest?themePreview=1.
    #
    com.liferay.portal.servlet.filters.themepreview.ThemePreviewFilter=false

    #
    # The thread dump filter will automatically log thread dumps when the portal
    # is too slow. Behavior can be configured via the property
    # "thread.dump.speed.threshold".
    #
    com.liferay.portal.servlet.filters.threaddump.ThreadDumpFilter=false

    #
    # The thread local filter cleans up short lived thread locals managed by
    # CentralizedThreadLocal to prevent memory leaks.
    #
    com.liferay.portal.servlet.filters.threadlocal.ThreadLocalFilter=true

    #
    # The unsynchronized print writer pool filter enables pooling print writers
    # to minimize the creation of java.io.PrintWriter instances because it is an
    # expensive action.
    #
    com.liferay.portal.servlet.filters.unsyncprintwriterpool.UnsyncPrintWriterPoolFilter=true

    #
    # The valid host name filter will check the host name from request's
    # host header. It rejects a request with invalid server name to prevent XSS
    # attacks. Setting this property to true increases security level while
    # setting this property to false optimizes server side performance.
    #
    com.liferay.portal.servlet.filters.validhostname.ValidHostNameFilter=true

    #
    # The valid HTML filter will move JavaScript that is outside of the closing
    # body tag to its proper place inside the body tag. Most sites will prefer
    # to leave this filter disabled because having JavaScript outside of the
    # body tag causes the page to render faster. However, the side effect is
    # that it will also make the site unaccessible to screen readers because the
    # HTML is technically invalid. Setting this property to true optimizes for
    # accessibility while setting this property to false optimizes for browser
    # performance.
    #
    com.liferay.portal.servlet.filters.validhtml.ValidHtmlFilter=false

    #
    # The virtual host filter maps hosts to public and private pages. For
    # example, if the public virtual host is www.helloworld.com and the friendly
    # URL is /helloworld, then http://www.helloworld.com is mapped to
    # http://localhost:8080/web/helloworld.
    #
    com.liferay.portal.servlet.filters.virtualhost.VirtualHostFilter=true